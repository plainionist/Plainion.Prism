<UserControl x:Class="Plainion.RI.InteractionRequests.CustomNotificationView"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:pn="http://github.com/ronin4net/plainion"
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="600">
    <i:Interaction.Triggers>
        <pn:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <pn:PopupWindowAction>
                <pn:PopupWindowAction.WindowContent>
                    <!-- Usually the actual content would be put into separate UserControl/File-->
                    <DockPanel LastChildFill="True">
                        <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" Margin="3" FlowDirection="RightToLeft">
                            <Button Content="Cancel" Margin="3,3,3,3" MinWidth="75" Command="{Binding CancelCommand}"/>
                            <Button Content="No" Margin="3,3,3,3" MinWidth="75" Command="{Binding NoCommand}"/>
                            <Button Content="Yes" Margin="3,3,3,3" MinWidth="75" Command="{Binding YesCommand}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="pack://application:,,,/Plainion.Prism;component/Images/Warning.png" Width="38" Height="38" Margin="10,0,0,0"/>
                            <TextBlock DockPanel.Dock="Top" Text="{Binding Question}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="25,0,0,0"/>
                        </StackPanel>
                    </DockPanel>
                </pn:PopupWindowAction.WindowContent>
            </pn:PopupWindowAction>
        </pn:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <GroupBox Header="Custom confirmation (custom view, custom notification as ViewModel)" BorderBrush="Black">
        <StackPanel Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Margin="5">
                <Run>
                    Invokes InteractionRequest with custom INotification object. A custom WindowContent is given to PopupWindowAction.
                    PopupWindowAction creates a DefaultConfirmationWindow with the given WindowContent as view. The provided Notification will be set as DataContext to the Window.
                </Run>
                <LineBreak/>
                <Run>
                    This approach works well for simple notifications and confirmations with minimal customized view. In these simple cases it is fine 
                    to create the INotification object with new directly in the requesting ViewModel and just set additional parameters directly as properties. 
                    One drawback of this approach is that the INotification object has two responsibilities: it is used by the requested ViewModel to pass 
                    "parameters" to the popup window and acts as DataContext for the custom view of the popup window. 
                    Another drawback is that the requesting ViewModel is tightly coupled to the ViewModel of the popup window (the INotification object). Any 
                    dependency required by the INotification object has to be passed to it from the requesting ViewModel directly.
                </Run>
            </TextBlock>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Content="Show confirmation" Command="{Binding ShowConfirmationCommand}" Margin="5" Padding="3"/>
                <TextBlock Grid.Column="1" Text="Response" Margin="5" VerticalAlignment="Center"/>
                <TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding Response}" Margin="5"/>
            </Grid>
        </StackPanel>
    </GroupBox>
</UserControl>
