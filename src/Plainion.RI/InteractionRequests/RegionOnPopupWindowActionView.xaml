<UserControl x:Class="Plainion.RI.InteractionRequests.RegionOnPopupWindowActionView"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:prism="http://www.codeplex.com/prism"
             xmlns:pn="http://github.com/ronin4net/plainion"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600">
    <i:Interaction.Triggers>
        <pn:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <pn:PopupWindowAction prism:RegionManager.RegionName="RegionOnPopupWindowActionView"/>
        </pn:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <GroupBox Header="View injection into PopupWindowAction (PopupWindowActionRegionAdapter)" BorderBrush="Black">
        <StackPanel Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Margin="5">
                <Run>
                    The PopupWindowAction gets a RegionName assigned directly. The PopupWindowAction will initially create an empty window. 
                    The RegionManager injects the view registered for the given RegionName into the PopupWindowAction by assigning the view
                    to the WindowContent. The view can import the ViewModel through MEF as usual.
                </Run>
                <LineBreak/>
                <Run>
                    This approach only works if PopupWindowActionRegionAdapter is registered in the Bootstrapper through
                    ConfigureRegionAdapterMappings(). PopupWindowActionRegionAdapter requires KeepAliveDelayedRegionCreationBehavior to be
                    added to the CompositionContainer (see code comments on KeepAliveDelayedRegionCreationBehavior for rational). Additionally either
                    at the end of Bootstrapper.Run() or just before raising the InteractionRequest RegionManager.UpdateRegions() has to 
                    be called. Seems that as PopupWindowAction is no FrameworkElement Prism misses some trigger to create and update the 
                    region for the PopupWindowAction.
                </Run>
                <LineBreak/>
                <Run>
                    With this approach View and ViewModel of the popup window are completely decoupled from the requesting View/ViewModel.
                </Run>
                <LineBreak/>
                <Run>
                    This approach works well for complex dialogs like "Settings" dialogs. 
                    This approach does support IInteractionRequestAware on the View as well as on the ViewModel.
                </Run>
            </TextBlock>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Content="Show confirmation" Command="{Binding ShowConfirmationCommand}" Margin="5" Padding="3"/>
                <TextBlock Grid.Column="1" Text="Response" Margin="5" VerticalAlignment="Center"/>
                <TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding Model.JustMySampleState}" Margin="5"/>
            </Grid>
        </StackPanel>
    </GroupBox>
</UserControl>
