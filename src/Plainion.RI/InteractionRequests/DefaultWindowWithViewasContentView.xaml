<UserControl x:Class="Plainion.RI.InteractionRequests.DefaultWindowWithViewAsContentView"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:pn="http://github.com/ronin4net/plainion"
             xmlns:l="clr-namespace:Plainion.RI.InteractionRequests"
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="600">
    <UserControl.Resources>
        <DataTemplate DataType="{x:Type l:ConfirmationContent}">
            <Border BorderBrush="Green" BorderThickness="2" Padding="10">
                <TextBlock Text="{Binding Question}"/>
            </Border>
        </DataTemplate>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <pn:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <pn:PopupViewAction IsIndependent="True"/>
        </pn:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <GroupBox Header="Default window (view elements via INotification.Content)" BorderBrush="Black">
        <StackPanel Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Margin="5">
                <Run>
                    Invokes InteractionRequest with default Confirmation class and without custom view. PopupWindowAction creates a DefaultConfirmationWindow.
                    The WindowContent will be a ContentControl which "Content" property will be bound to INotification.Content. INotification.Content could be anything
                    from simple string to "complex" UI controls borders, images etc.
                </Run>
                <LineBreak/>
                <Run>
                    Applying UI elements to INotification.Content directly in ViewModel wouldn't be the prefered approach as this creates dependencies 
                    from ViewModel to View but at least it is simple.
                </Run>
                <LineBreak/>
                <Run>
                    This approach works well for simple notifications (like informations) and simple yes/no confirmations presented to the user.
                </Run>
            </TextBlock>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Content="Show confirmation" Command="{Binding ShowConfirmationCommand}" Margin="5" Padding="3"/>
                <TextBlock Grid.Column="1" Text="Response" Margin="5" VerticalAlignment="Center"/>
                <TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding Response}" Margin="5"/>
            </Grid>
        </StackPanel>
    </GroupBox>
</UserControl>
