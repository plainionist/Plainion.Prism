<UserControl x:Class="Plainion.RI.InteractionRequests.ComplexCustomViewView"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:pn="http://github.com/ronin4net/plainion"
             xmlns:dialogs="clr-namespace:Plainion.RI.InteractionRequests.Dialogs"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600">
    <i:Interaction.Triggers>
        <pn:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <pn:PopupWindowAction>
                <pn:PopupWindowAction.WindowContent>
                    <dialogs:ComplexDialog DataContext="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                </pn:PopupWindowAction.WindowContent>
            </pn:PopupWindowAction>
        </pn:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <GroupBox Header="Complex custom view (WindowContent is custom view, ViewModel via INotification.Content)" BorderBrush="Black">
        <StackPanel Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Margin="5">
                <Run>
                    Invokes InteractionRequest with default Notification class with having custom view assigned to PopupWindowAction.WindowContent.
                    The PopupWindowAction will create an empty window and assign the WindowContent as child. The custom view expects a custom
                    ViewModel which is provided through INotification.Content.
                </Run>
                <LineBreak/>
                <Run>
                    With this approach we try to separate the ViewModel of the popup window from the notification as such which could be seen
                    as "parameters" passed to the popup window.
                </Run>
                <LineBreak/>
                <Run FontWeight="Bold">
                    This approach does not work.
                </Run>
                <Run>
                    Until now we failed to update the DataContext of the custom view to Notification.Content without logic in code behind 
                    of view esp. in a way that PopupWindowAction considers the viewmodel for checking for IInteractionRequestAware. Looks
                    like binding inside PopupWindowAction does not work.
                </Run>
            </TextBlock>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Content="Show confirmation" Command="{Binding ShowConfirmationCommand}" Margin="5" Padding="3"/>
                <TextBlock Grid.Column="1" Text="Response" Margin="5" VerticalAlignment="Center"/>
                <TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding Model.JustMySampleState}" Margin="5"/>
            </Grid>
        </StackPanel>
    </GroupBox>
</UserControl>
