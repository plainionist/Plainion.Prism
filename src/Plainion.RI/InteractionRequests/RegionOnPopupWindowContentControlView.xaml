<UserControl x:Class="Plainion.RI.InteractionRequests.RegionOnPopupWindowContentControlView"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:pn="http://github.com/ronin4net/plainion"
             xmlns:prism="http://www.codeplex.com/prism"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600">
    <i:Interaction.Triggers>
        <pn:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <pn:PopupWindowAction>
                <pn:PopupWindowAction.WindowContent>
                    <pn:PopupWindowContentControl prism:RegionManager.RegionName="RegionOnPopupWindowContentControlView"/>
                </pn:PopupWindowAction.WindowContent>
            </pn:PopupWindowAction>
        </pn:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <GroupBox Header="View injection into WindowContent (region on PopupWindowContentControl)" BorderBrush="Black">
        <StackPanel Orientation="Vertical">
            <TextBlock TextWrapping="Wrap" Margin="5">
                <Run>
                    The PopupWindowAction.WindowContent contains a PopupWindowContentControl with a RegionName assigned. 
                    The PopupWindowAction will create an empty window and assign the WindowContent as child. The RegionManager injects 
                    the view registered for the given RegionName into the PopupWindowContentControl. 
                    The view can import the ViewModel through MEF as usual.
                </Run>
                <LineBreak/>
                <Run>
                    With this approach View and ViewModel of the popup window are completely decoupled from the requesting View/ViewModel.
                </Run>
                <LineBreak/>
                <Run>
                    This approach works well for complex dialogs like "Settings" dialogs. 
                    This approach does support IInteractionRequestAware because PopupWindowContentControl implements this interface and forwards
                    all properties to its content.
                </Run>
            </TextBlock>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Content="Show confirmation" Command="{Binding ShowConfirmationCommand}" Margin="5" Padding="3"/>
                <TextBlock Grid.Column="1" Text="Response" Margin="5" VerticalAlignment="Center"/>
                <TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding Model.JustMySampleState}" Margin="5"/>
            </Grid>
        </StackPanel>
    </GroupBox>
</UserControl>
